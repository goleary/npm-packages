on:
    push:
        branches:
            - release/*/*
env:
    SLACK_WEBHOOK: "${{ secrets.SLACK_WEBHOOK }}"

jobs:
    release:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
              with:
                  # Fetch full history to get all tags so we can get PREV_VERSION
                  fetch-depth: 0

            - name: Set version enviroment variables
              run: |
                  . .github/utils.sh
                  slack_message "New npm release"

                  release_mode=stable


                  next_version=${GITHUB_REF##*/}
                  next_tag="$pkg/v${next_version}"
                  set -x
                  echo "$GITHUB_REF"

                  pkg=$(echo "$GITHUB_REF" | cut -d / -f 4)
                  npm_name=$pkg

                  current_version=0.0.0

                  if [ -f "packages/$pkg/package.json" ]; then
                    current_version="$(jq -r .version "packages/$pkg/package.json")"
                    npm_name="$(jq -r .name "packages/$pkg/package.json")"
                  fi


                  next_tag="$pkg/v${next_version}"

                  if [ "$next_version" = "prerelease" ]; then
                    next_version="${current_version}-dev.${GITHUB_SHA:0:10}"
                    # No tag for prereleases
                    next_tag=
                    release_mode=prerelease
                  fi


                  prev_tag="$(git describe --abbrev=0 --match "$pkg/v*" || true)"
                  prev_version=$(echo "$prev_tag" | sed -E "s/.+v([0-9\.]+)\$/\1/")

                  link_ver="$(echo $next_version | tr -cd '[:alnum:]')"
                  changelog_link="https://github.com/valu-digital/npm-packages/blob/master/packages/$pkg/CHANGELOG.md#v${link_ver}"

                  if [ "$next_version" = "$prev_version" ]; then
                    echo "Cannot release $prev_version again"
                    exit 9
                  fi


                  set -x
                  echo "pkg=$pkg" >> $GITHUB_ENV
                  echo "npm_name=$npm_name" >> $GITHUB_ENV
                  echo "next_version=$next_version" >> $GITHUB_ENV
                  echo "next_tag=$next_tag" >> $GITHUB_ENV
                  echo "prev_tag=$prev_tag" >> $GITHUB_ENV
                  echo "prev_version=$prev_version" >> $GITHUB_ENV
                  echo "release_mode=$release_mode" >> $GITHUB_ENV
                  echo "changelog_link=$changelog_link" >> $GITHUB_ENV

            - name: Set version number
              run: |
                  . .github/npm-release.sh

                  jq ".version = \"$next_version\"" package.json > tmp.json
                  mv tmp.json package.json

            - name: Commit version numbers
              if: ${{ env.release_mode == 'stable' }}
              run: |
                  . .github/npm-release.sh
                  git config user.email "action@github.com"
                  git config user.name "${{ github.actor }}"
                  git add package.json
                  git commit -m "$pkg: v${next_version}"
                  git tag -a "$next_tag" -m "$pkg v$next_version"

            - name: Use Node.js
              uses: actions/setup-node@v1
              with:
                  node-version: "14.x"

            - name: "Build ${{ env.pkg }}"
              run: |
                  . .github/npm-release.sh

                  if [ -f package-lock.json ]; then
                      npm ci
                  else
                      npm install
                  fi

                  npm run build

                  npm run test

            - name: Make STABLE release
              if: ${{ env.release_mode == 'stable' }}
              run: |
                  . .github/npm-release.sh
                  echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > "$HOME/.npmrc"
                  npm whoami
                  npm publish --access public
                  rm "$HOME/.npmrc"

                  git push origin HEAD:master
                  git push origin --tags

                  slack_message "New \`/$npm_name\` stable release. \n\nInstall with \`npm install $npm_name@^${next_version}\`"

            - name: Make PRERELEASE release
              if: ${{ env.release_mode == 'prerelease' }}
              run: |
                  . .github/npm-release.sh
                  echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > "$HOME/.npmrc"
                  npm whoami
                  npm publish --tag dev --access public
                  rm "$HOME/.npmrc"

                  slack_message "New \`$npm_name\` prelease. \n\nInstall with \`npm install --save-exact $npm_name@${next_version}\`"

            - name: Notify about failure
              if: failure()
              run: |
                  set -eu
                  . .github/utils.sh
                  slack_message "Failed to make npm release for ${pkg:-} / ${npm_name:-}"
